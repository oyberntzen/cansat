/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_PACKET_PB_H_INCLUDED
#define PB_PACKET_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Header {
    uint32_t index;
    uint64_t time;
    uint32_t session_id;
} Header;

typedef struct _Telemetry_ENV {
    float temperature;
    float humidity;
    float pressure;
    float light;
} Telemetry_ENV;

typedef struct _Telemetry {
    bool has_env;
    Telemetry_ENV env;
} Telemetry;

typedef struct _Packet {
    bool has_header;
    Header header;
    bool has_telemetry;
    Telemetry telemetry;
} Packet;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Packet_init_default                      {false, Header_init_default, false, Telemetry_init_default}
#define Header_init_default                      {0, 0, 0}
#define Telemetry_init_default                   {false, Telemetry_ENV_init_default}
#define Telemetry_ENV_init_default               {0, 0, 0, 0}
#define Packet_init_zero                         {false, Header_init_zero, false, Telemetry_init_zero}
#define Header_init_zero                         {0, 0, 0}
#define Telemetry_init_zero                      {false, Telemetry_ENV_init_zero}
#define Telemetry_ENV_init_zero                  {0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Header_index_tag                         1
#define Header_time_tag                          2
#define Header_session_id_tag                    3
#define Telemetry_ENV_temperature_tag            1
#define Telemetry_ENV_humidity_tag               2
#define Telemetry_ENV_pressure_tag               3
#define Telemetry_ENV_light_tag                  4
#define Telemetry_env_tag                        1
#define Packet_header_tag                        1
#define Packet_telemetry_tag                     2

/* Struct field encoding specification for nanopb */
#define Packet_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  header,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  telemetry,         2)
#define Packet_CALLBACK NULL
#define Packet_DEFAULT NULL
#define Packet_header_MSGTYPE Header
#define Packet_telemetry_MSGTYPE Telemetry

#define Header_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   index,             1) \
X(a, STATIC,   SINGULAR, UINT64,   time,              2) \
X(a, STATIC,   SINGULAR, UINT32,   session_id,        3)
#define Header_CALLBACK NULL
#define Header_DEFAULT NULL

#define Telemetry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  env,               1)
#define Telemetry_CALLBACK NULL
#define Telemetry_DEFAULT NULL
#define Telemetry_env_MSGTYPE Telemetry_ENV

#define Telemetry_ENV_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       1) \
X(a, STATIC,   SINGULAR, FLOAT,    humidity,          2) \
X(a, STATIC,   SINGULAR, FLOAT,    pressure,          3) \
X(a, STATIC,   SINGULAR, FLOAT,    light,             4)
#define Telemetry_ENV_CALLBACK NULL
#define Telemetry_ENV_DEFAULT NULL

extern const pb_msgdesc_t Packet_msg;
extern const pb_msgdesc_t Header_msg;
extern const pb_msgdesc_t Telemetry_msg;
extern const pb_msgdesc_t Telemetry_ENV_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Packet_fields &Packet_msg
#define Header_fields &Header_msg
#define Telemetry_fields &Telemetry_msg
#define Telemetry_ENV_fields &Telemetry_ENV_msg

/* Maximum encoded size of messages (where known) */
#define Header_size                              23
#define PACKET_PB_H_MAX_SIZE                     Packet_size
#define Packet_size                              49
#define Telemetry_ENV_size                       20
#define Telemetry_size                           22

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
